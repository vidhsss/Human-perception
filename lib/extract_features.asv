function features=extract_features(stim,net,dagg_flag,run_path,net1)
% run(run_path);
if(dagg_flag==0)
%     net = load(type) ;
    net = vl_simplenn_tidy(net);
    nimages=length(stim);
    features=cell(nimages,1);
    Src=net.meta.normalization.imageSize(1:2);% size of the normalized image
    rgb_values=net.meta.normalization.averageImage;rgb_values=rgb_values(:);
    average_image=ones(Src(1),Src(2),3);
    for ind=1:3,average_image(:,:,ind)=rgb_values(ind);end
    for ind=1:nimages
        bimage_ip=single(stim{ind});
        if size(bimage_ip,3)==1, bimage_ip = repmat(bimage_ip,1,1,3); end
        cimage=imresize(bimage_ip,Src);
        cimage=cimage-average_image;
        features{ind}=vl_simplenn(net,cimage);
    end
elseif(dagg_flag==1)
%     net = dagnn.DagNN.loadobj() ;
%     urlwrite(...
% 'http://www.vlfeat.org/matconvnet/models/imagenet−vgg−f.mat', ...
% 'imagenet−vgg−f.mat') ;
    
    %     net1=dagnn.DagNN()
    %     net=net1.fromSimpleNN(net)
    %     net.mode = 'test' ;
    nimages=length(stim);
    features=cell(nimages,1);
    Src=net1.meta.normalization.imageSize(1:2);% size of the normalized image
    rgb_values=net1.meta.normalization.averageImage;rgb_values=rgb_values(:);
    average_image=ones(Src(1),Src(2),3);
    for ind=1:3,average_image(:,:,ind)=rgb_values(ind);end
%     net.conserveMemory=0;
%     nL=length(net.Layers)-1;
%     Src=net.meta.normalization.imageSize(1:2);% size of the normalized image
%     rgb_values=opts.averageImage;rgb_values=rgb_values(:);
%     average_image=ones(224,224,3);
%     for ind=1:3,average_image(:,:,ind)=rgb_values(ind);end
    for i=1:nimages
        bimage_ip=single(stim{i});
        if size(bimage_ip,3)==1, bimage_ip = repmat(bimage_ip,1,1,3); end
        cimage=imresize(bimage_ip,Src);
        cimage=cimage-average_image;
%         cimage=cimage-average_image;
% %         cimage = bsxfun(@minus, cimage, net.meta.normalization.averageImage) ;
        %cimage=cimage-ones(1,1,3)*128; % abstract images
        features{i}=cell(125,1);
%         layername=net.Layers(1).Name
%         features{i}{1}=activations(net,cimage,layername)
%         count=1
%         size(features{i}{1})
        for j=1:125
            layername=net.Layers(j).Name
%             count=count+1;
            features{i}{j}=activations(net,cimage,layername);
%             size(features{i}{count})
        end
%         features{i}{count+1}=activations(net,features{i}{3},layername);
%         count=count+1;
%         features{i}{count+1}=features{i}{count}+ features{i}{count-1};
%         count=count+1;
%         k=13
%         while(k<120)
%             s=count;
%             for j=k:k+6
%                 layername=net.Layers(j).Name
%                 count=count+1;
%                 features{i}{count}=activations(net,features{i}{count-1},layername);
%             end
%             count=count+1;
%             features{i}{count}=features{i}{s+1}+ features{i}{count-1};
%             k=k+7;
%         end
%         for j=121:123
%                 layername=net.Layers(j).Name
%                 count=count+1;
%                 features{i}{count}=activations(net,features{i}{count-1},layername);
%         end
%         net.eval({'data', cimage})
%         for L=1:nL
%             scores(L).x = vec(net.vars(L).value);
%         end
%         features{i}=scores;
        end 
    end
end
